--inicializar git

git init

-- configurar nombre de usuario en git

git config --global user.name 'nombre'

--configurar correo

git config --global user.email 'correo'


-- observar configuracion de git

git config --list


--verificar el stado de los documentos o carpetas

git status

-- agregar  archivos para seguimiento [staging] -- tracked

git add [archivo]

otra opcion  - este comando toma todos los archivos para comenzar 
hacerles seguimientos 

git add . 

--desmarcar archivo del estado temporal

git rm --cached nombre.txt

--este comando me permite guardar los archivos en mi repositorio local

git commit -m 'descripcion del commit'


-- este comando me muestra los cambios  que han existido en un archivo

git show archivo.txt



--historial de commit detallados

git log [archivo]

----muestra el historial de cambio especificos en cada commit desde el mas reciente al mas viejo
git log --stat

-- observar cambios entre commit

git diff clave clave

==estudiat todos los dias
cambio


==tener claro cunado implementar estos comandos

git reset ********* --hard,soft

== este comando me permite viajar a una version especifica 
de un archivo

git checkout [clave] [archivo]

=si quiero guardar los cambios tengo que enviar el archivo al staging
=crear el commit

==si quiero volver a mi estado principal antes del checkout
ejecuto esto

git checkout main [archivo]


=creacion de ramas

git branch 'nombre'

==viajar entre ramas 

git checkout nommbreRama

 ver ramas
==git branch

=para fucionar ramas debo estabecer mi rama principal y despues realizo el merge

git merge nombre_rama



git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt